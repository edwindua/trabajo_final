/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package co.udec;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class actuaeliominar extends javax.swing.JFrame {

    /**
     * Creates new form actuaeliominar
     */
    public actuaeliominar() {
         initComponents();
        mostrarProductos();
        Mostrar();
        
        jTable2.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int filaSeleccionada = jTable2.getSelectedRow();
                if (filaSeleccionada != -1) {
                    String direccion = jTable2.getValueAt(filaSeleccionada, 3).toString();
                    actuali.setText(direccion);
                }
            }
        });
        ;
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToggleButton2 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        actuali = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jToggleButton2.setText("jToggleButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jTable2.setBackground(new java.awt.Color(204, 255, 204));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable2);

        actuali.setBackground(new java.awt.Color(0, 0, 0));
        actuali.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        actuali.setForeground(new java.awt.Color(255, 255, 255));
        actuali.setText("ACTUALIZAR");
        actuali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualiActionPerformed(evt);
            }
        });

        eliminar.setBackground(new java.awt.Color(0, 0, 0));
        eliminar.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        eliminar.setForeground(new java.awt.Color(255, 255, 255));
        eliminar.setText("ELIMINAR");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/devolver.png"))); // NOI18N
        jButton2.setText("VOLVER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ACTUALIZAR Y ELIMINAR ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(actuali)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(276, 276, 276)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(252, 252, 252)
                                .addComponent(jLabel2)
                                .addGap(62, 62, 62)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actuali)
                    .addComponent(eliminar))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        inicio i2= new inicio();
        i2.setVisible(true);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void actualiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualiActionPerformed
         Actualizar(actuali);
    }//GEN-LAST:event_actualiActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
         Eliminar1();
    }//GEN-LAST:event_eliminarActionPerformed

    public DefaultTableModel mostrarProductos() {
         String[] NombreC = {"DOCUMENTO", "NOMBRE", "APELLIDOS", "PLACA", "HORAS"};
        String[] Mascotas = new String[5];
        DefaultTableModel Tabla1 = new DefaultTableModel(null, NombreC);
        jTable2.setModel((Tabla1));

        String sql = "select documento DOCUMENTO, nombre NOMBRE, apellidos APELLIDOS, placa PLACA, horas HORAS from ingreso";/*"SELECT A.Nombres,A.Apellidos,B.Tipo_Doc, A.Numero_Doc,A.Direccion,A.Email,A.Estado FROM personas A\n"
                + "INNER JOIN tipo_documento B\n"
                + "ON A.Tipo_Doc_Id= B.Id_Tipodoc";*/
        String Nombre = "";
        String SQL1 = "SELECT * FROM ingreso;";
        conexion C1 = new conexion();
        Connection cn = null;
        PreparedStatement pst = null;
        PreparedStatement pst1 = null;
        ResultSet rs = null;
        ResultSet rs1 = null;
        try {
            cn = C1.Conectar1();
            pst = cn.prepareStatement(sql);
            pst1 = cn.prepareStatement(SQL1);
            rs = pst.executeQuery();
            rs1 = pst1.executeQuery();
            int[] anchos = {40, 50, 50, 80, 50};
            for (int x = 0; x < Mascotas.length; x++) {
                jTable2.getColumnModel().getColumn(x).setPreferredWidth(anchos[x]);
            }
            if (jTable2.getColumnModel().getColumnCount() > 0) {
                jTable2.getColumnModel().getColumn(0).setResizable(false);
                jTable2.getColumnModel().getColumn(1).setResizable(false);
                jTable2.getColumnModel().getColumn(2).setResizable(false);
                jTable2.getColumnModel().getColumn(3).setResizable(false);
                jTable2.getColumnModel().getColumn(4).setResizable(false);

            }

            while (rs.next()) {

                Mascotas[0] = rs.getString("DOCUMENTO");
                Mascotas[1] = rs.getString("NOMBRE");
                Mascotas[2] = rs.getString("APELLIDOS");
                Mascotas[3] = rs.getString("PLACA");
                Mascotas[4] = rs.getString("HORAS");
                Tabla1.addRow(Mascotas);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "NO HA PODIDO INGRESAR A LA BASE DE DATOS " + e, "Conexion", JOptionPane.ERROR_MESSAGE);
            System.out.println(e);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    rs.close();
                }
                if (cn != null) {
                    rs.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        }

        return Tabla1;
    }

    public void Mostrar() {

        String nombre = "";
        String SQL1 = "SELECT * FROM ingreso;";
        conexion C1 = new conexion();
        Connection cn = null;

        PreparedStatement pst1 = null;

        ResultSet rs1 = null;
        try {
            cn = C1.Conectar1();
            pst1 = cn.prepareStatement(SQL1);
            rs1 = pst1.executeQuery();

            if (rs1.next()) {
                nombre = rs1.getString("documento");
                //Clientes_Registrados.setText(Nombre);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "NO HA PODIDO INGRESAR A LA BASE DE DATOS" + e, "Conexion", JOptionPane.ERROR_MESSAGE);
            System.out.println(e);
        }

    }

    public void Actualizar(JButton Dirreccion) {

        int Fila = jTable2.getSelectedRow();
        String nombres = jTable2.getValueAt(Fila, 1).toString();
        String numeroDoc = jTable2.getValueAt(Fila, 2).toString();

        // Crear la consulta SQL para buscar el ID de la persona
        String sql = "SELECT Id_persona FROM ingreso WHERE nombre = ? AND apellidos = ?";

        // Conectar a la base de datos y ejecutar la consulta SQL
        conexion C1 = new conexion();
        Connection cn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        int idPersona = 0;

        try {
            cn = C1.Conectar1();
            pst = cn.prepareStatement(sql);
            pst.setString(1, nombres);
            pst.setString(2, numeroDoc);
            rs = pst.executeQuery();

            if (rs.next()) {
                // Si se encontró una persona con los valores especificados, obtener su ID
                idPersona = rs.getInt("Id_persona");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "PERSONA NO EXISTENTE: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "CONEXION INVALIDA: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (idPersona > 0) {
            String SqlD = "UPDATE ingreso\n"
                    + "SET placa='" + Dirreccion.getText() + "' WHERE Id_persona = ?;";

            // Conectar a la base de datos y ejecutar la consulta SQL de eliminación
            try {
                cn = C1.Conectar1();
                pst = cn.prepareStatement(SqlD);
                pst.setInt(1, idPersona);
                pst.executeUpdate();
                mostrarProductos();
                JOptionPane.showMessageDialog(null, "ACTUALIZACION REALIZADA");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "NO SE PUSO ELIMINAR EL USUARIO: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    if (pst != null) {
                        pst.close();
                    }
                    if (cn != null) {
                        cn.close();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "CONEXION INVALIDA: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "ERROR.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    
     public void Eliminar1() {

        int Fila = jTable2.getSelectedRow();
        String nombres = jTable2.getValueAt(Fila, 1).toString();
        String numeroDoc = jTable2.getValueAt(Fila, 2).toString();

        // Crear la consulta SQL para buscar el ID de la persona
        String sql = "SELECT Id_persona FROM ingreso WHERE nombre = ? AND apellidos = ?";

        // Conectar a la base de datos y ejecutar la consulta SQL
        conexion C1 = new conexion();
        Connection cn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        int idPersona = 0;

        try {
            cn = C1.Conectar1();
            pst = cn.prepareStatement(sql);
            pst.setString(1, nombres);
            pst.setString(2, numeroDoc);
            rs = pst.executeQuery();

            if (rs.next()) {
                // Si se encontró una persona con los valores especificados, obtener su ID
                idPersona = rs.getInt("Id_persona");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERROR: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "ERROR: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (idPersona > 0) {
            String SqlD = "DELETE FROM ingreso WHERE id_persona = ? ";

            // Conectar a la base de datos y ejecutar la consulta SQL de eliminación
            try {
                cn = C1.Conectar1();
                pst = cn.prepareStatement(SqlD);
                pst.setInt(1, idPersona);
                pst.executeUpdate();
                mostrarProductos();
                JOptionPane.showMessageDialog(null, "ACTUALIZACION REALIZADA");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "ERROR: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    if (pst != null) {
                        pst.close();
                    }
                    if (cn != null) {
                        cn.close();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "ERROR: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró ninguna persona con los valores especificados.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(actuaeliominar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(actuaeliominar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(actuaeliominar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(actuaeliominar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new actuaeliominar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actuali;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables
}
